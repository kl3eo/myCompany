{"ast":null,"code":"import _regeneratorRuntime from \"/home/alex/react_projects/myCompany/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport React from 'react';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar actions = {\n  init: 'init'\n};\nvar defaultColumn = {\n  Cell: function Cell(_ref) {\n    var _ref$cell$value = _ref.cell.value,\n        value = _ref$cell$value === void 0 ? '' : _ref$cell$value;\n    return String(value);\n  },\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER\n};\n\nfunction defaultOrderByFn(arr, funcs, dirs) {\n  return _toConsumableArray(arr).sort(function (rowA, rowB) {\n    for (var i = 0; i < funcs.length; i += 1) {\n      var sortFn = funcs[i];\n      var desc = dirs[i] === false || dirs[i] === 'desc';\n      var sortInt = sortFn(rowA, rowB);\n\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt;\n      }\n    }\n\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n  });\n}\n\nfunction defaultGroupByFn(rows, columnId) {\n  return rows.reduce(function (prev, row, i) {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    var resKey = \"\".concat(row.values[columnId]);\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n    prev[resKey].push(row);\n    return prev;\n  }, {});\n}\n\nvar mergeProps = function mergeProps() {\n  var props = {};\n\n  for (var _len = arguments.length, groups = new Array(_len), _key = 0; _key < _len; _key++) {\n    groups[_key] = arguments[_key];\n  }\n\n  groups.forEach(function () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$style = _ref2.style,\n        style = _ref2$style === void 0 ? {} : _ref2$style,\n        className = _ref2.className,\n        rest = _objectWithoutProperties(_ref2, [\"style\", \"className\"]);\n\n    props = _objectSpread2({}, props, {}, rest, {\n      style: _objectSpread2({}, props.style || {}, {}, style),\n      className: [props.className, className].filter(Boolean).join(' ')\n    });\n  });\n\n  if (props.className === '') {\n    delete props.className;\n  }\n\n  return props;\n};\n\nvar applyHooks = function applyHooks(hooks, initial) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  return hooks.reduce(function (prev, next) {\n    var nextValue = next.apply(void 0, [prev].concat(args));\n\n    if (typeof nextValue === 'undefined') {\n      throw new Error('React Table: A hook just returned undefined! This is not allowed.');\n    }\n\n    return nextValue;\n  }, initial);\n};\n\nvar applyPropHooks = function applyPropHooks(hooks) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  return hooks.reduce(function (prev, next) {\n    return mergeProps(prev, next.apply(void 0, args));\n  }, {});\n};\n\nfunction ensurePluginOrder(plugins, befores, pluginName, afters) {\n  var pluginIndex = plugins.findIndex(function (plugin) {\n    return plugin.pluginName === pluginName;\n  });\n\n  if (pluginIndex === -1) {\n    throw new Error(\"The plugin \".concat(pluginName, \" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \").concat(pluginName, \".pluginName = '\").concat(pluginName, \"'\\n\"));\n  }\n\n  befores.forEach(function (before) {\n    var beforeIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === before;\n    });\n\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      throw new Error(\"React Table: The \".concat(pluginName, \" plugin hook must be placed after the \").concat(before, \" plugin hook!\"));\n    }\n  });\n  afters.forEach(function (after) {\n    var afterIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === after;\n    });\n\n    if (afterIndex > -1 && afterIndex < pluginIndex) {\n      throw new Error(\"React Table: The \".concat(pluginName, \" plugin hook must be placed before the \").concat(after, \" plugin hook!\"));\n    }\n  });\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\n\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n} // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\n\nvar safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nfunction useMountedLayoutEffect(fn, deps) {\n  var mountedRef = React.useRef(false);\n  safeUseLayoutEffect(function () {\n    if (mountedRef.current) {\n      fn();\n    }\n\n    mountedRef.current = true; // eslint-disable-next-line\n  }, deps);\n}\n\nfunction useAsyncDebounce(defaultFn) {\n  var defaultWait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var debounceRef = React.useRef({});\n  debounceRef.current.defaultFn = defaultFn;\n  debounceRef.current.defaultWait = defaultWait;\n  var debounce = React.useCallback(function _callee2() {\n    var fn,\n        wait,\n        _args2 = arguments;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fn = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : debounceRef.current.defaultFn;\n            wait = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : debounceRef.current.defaultWait;\n\n            if (!debounceRef.current.promise) {\n              debounceRef.current.promise = new Promise(function (resolve, reject) {\n                debounceRef.current.resolve = resolve;\n                debounceRef.current.reject = reject;\n              });\n            }\n\n            if (debounceRef.current.timeout) {\n              clearTimeout(debounceRef.current.timeout);\n            }\n\n            debounceRef.current.timeout = setTimeout(function _callee() {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      delete debounceRef.current.timeout;\n                      _context.prev = 1;\n                      _context.t0 = debounceRef.current;\n                      _context.next = 5;\n                      return _regeneratorRuntime.awrap(fn());\n\n                    case 5:\n                      _context.t1 = _context.sent;\n\n                      _context.t0.resolve.call(_context.t0, _context.t1);\n\n                      _context.next = 12;\n                      break;\n\n                    case 9:\n                      _context.prev = 9;\n                      _context.t2 = _context[\"catch\"](1);\n                      debounceRef.current.reject(_context.t2);\n\n                    case 12:\n                      _context.prev = 12;\n                      delete debounceRef.current.promise;\n                      return _context.finish(12);\n\n                    case 15:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, [[1, 9, 12, 15]]);\n            }, wait);\n            return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  }, []);\n  return debounce;\n}\n\nfunction useConsumeHookGetter(hooks, hookName) {\n  var getter = useGetLatest(hooks[hookName]);\n  hooks[hookName] = undefined;\n  return getter;\n}\n\nfunction decorateColumn(column, userDefaultColumn, parent, depth, index) {\n  // Apply the userDefaultColumn\n  column = _objectSpread2({}, defaultColumn, {}, userDefaultColumn, {}, column); // First check for string accessor\n\n  var _column = column,\n      id = _column.id,\n      accessor = _column.accessor,\n      Header = _column.Header;\n\n  if (typeof accessor === 'string') {\n    id = id || accessor;\n    var accessorPath = accessor.split('.');\n\n    accessor = function accessor(row) {\n      return getBy(row, accessorPath);\n    };\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header;\n  }\n\n  if (!id && column.columns) {\n    console.error(column);\n    throw new Error('A column ID (or unique \"Header\" value) is required!');\n  }\n\n  if (!id) {\n    console.error(column);\n    throw new Error('A column ID (or string accessor) is required!');\n  }\n\n  column = _objectSpread2({\n    // Make sure there is a fallback header, just in case\n    Header: function Header() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    },\n    Footer: function Footer() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    }\n  }, column, {\n    // Materialize and override this stuff\n    id: id,\n    accessor: accessor,\n    parent: parent,\n    depth: depth,\n    index: index\n  });\n  return column;\n} // Build the visible columns, headers and flat column list\n\n\nfunction decorateColumnTree(columns, defaultColumn, parent) {\n  var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return columns.map(function (column, columnIndex) {\n    column = decorateColumn(column, defaultColumn, parent, depth, columnIndex);\n\n    if (column.columns) {\n      column.columns = decorateColumnTree(column.columns, defaultColumn, column, depth + 1);\n    }\n\n    return column;\n  });\n} // Build the header groups from the bottom up\n\n\nfunction makeHeaderGroups(flatColumns, defaultColumn) {\n  var headerGroups = []; // Build each header group from the bottom up\n\n  var buildGroup = function buildGroup(columns, depth) {\n    var headerGroup = {\n      headers: []\n    };\n    var parentColumns = []; // Do any of these columns have parents?\n\n    var hasParents = columns.some(function (col) {\n      return col.parent;\n    });\n    columns.forEach(function (column) {\n      // Are we the first column in this group?\n      var isFirst = !parentColumns.length; // What is the latest (last) parent column?\n\n      var latestParentColumn = [].concat(parentColumns).reverse()[0]; // If the column has a parent, add it if necessary\n\n      if (column.parent) {\n        var similarParentColumns = parentColumns.filter(function (d) {\n          return d.originalId === column.parent.id;\n        });\n\n        if (isFirst || latestParentColumn.originalId !== column.parent.id) {\n          parentColumns.push(_objectSpread2({}, column.parent, {\n            originalId: column.parent.id,\n            id: [column.parent.id, similarParentColumns.length].join('_')\n          }));\n        }\n      } else if (hasParents) {\n        // If other columns have parents, we'll need to add a place holder if necessary\n        var originalId = [column.id, 'placeholder'].join('_');\n\n        var _similarParentColumns = parentColumns.filter(function (d) {\n          return d.originalId === originalId;\n        });\n\n        var placeholderColumn = decorateColumn({\n          originalId: originalId,\n          id: [column.id, 'placeholder', _similarParentColumns.length].join('_'),\n          placeholderOf: column\n        }, defaultColumn);\n\n        if (isFirst || latestParentColumn.originalId !== placeholderColumn.originalId) {\n          parentColumns.push(placeholderColumn);\n        }\n      } // Establish the new headers[] relationship on the parent\n\n\n      if (column.parent || hasParents) {\n        latestParentColumn = [].concat(parentColumns).reverse()[0];\n        latestParentColumn.headers = latestParentColumn.headers || [];\n\n        if (!latestParentColumn.headers.includes(column)) {\n          latestParentColumn.headers.push(column);\n        }\n      }\n\n      column.totalHeaderCount = column.headers ? column.headers.reduce(function (sum, header) {\n        return sum + header.totalHeaderCount;\n      }, 0) : 1; // Leaf node columns take up at least one count\n\n      headerGroup.headers.push(column);\n    });\n    headerGroups.push(headerGroup);\n\n    if (parentColumns.length) {\n      buildGroup(parentColumns);\n    }\n  };\n\n  buildGroup(flatColumns);\n  return headerGroups.reverse();\n}\n\nvar pathObjCache = new Map();\n\nfunction getBy(obj, path, def) {\n  if (!path) {\n    return obj;\n  }\n\n  var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n  var pathObj = pathObjCache.get(cacheKey) || function () {\n    var pathObj = makePathArray(path);\n    pathObjCache.set(cacheKey, pathObj);\n    return pathObj;\n  }();\n\n  var val;\n\n  try {\n    val = pathObj.reduce(function (cursor, pathPart) {\n      return cursor[pathPart];\n    }, obj);\n  } catch (e) {// continue regardless of error\n  }\n\n  return typeof val !== 'undefined' ? val : def;\n}\n\nfunction getFirstDefined() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  for (var i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i];\n    }\n  }\n}\n\nfunction flexRender(Comp, props) {\n  return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n}\n\nfunction isClassComponent(component) {\n  return typeof component === 'function' && !!function () {\n    var proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  }();\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function';\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component);\n}\n\nfunction isFunction(a) {\n  if (typeof a === 'function') {\n    return a;\n  }\n}\n\nfunction flattenBy(columns, childKey) {\n  var flatColumns = [];\n\n  var recurse = function recurse(columns) {\n    columns.forEach(function (d) {\n      if (!d[childKey]) {\n        flatColumns.push(d);\n      } else {\n        recurse(d[childKey]);\n      }\n    });\n  };\n\n  recurse(columns);\n  return flatColumns;\n}\n\nfunction expandRows(rows, _ref) {\n  var manualExpandedKey = _ref.manualExpandedKey,\n      expanded = _ref.expanded,\n      _ref$expandSubRows = _ref.expandSubRows,\n      expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n  var expandedRows = [];\n\n  var handleRow = function handleRow(row) {\n    var key = row.path.join('.');\n    row.isExpanded = row.original && row.original[manualExpandedKey] || expanded.includes(key);\n    row.canExpand = row.subRows && !!row.subRows.length;\n    expandedRows.push(row);\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rows.forEach(handleRow);\n  return expandedRows;\n} //\n\n\nvar reOpenBracket = /\\[/g;\nvar reCloseBracket = /\\]/g;\n\nfunction makePathArray(obj) {\n  return flattenDeep(obj) // remove all periods in parts\n  .map(function (d) {\n    return String(d).replace('.', '_');\n  }) // join parts using period\n  .join('.') // replace brackets with periods\n  .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n  .split('.');\n}\n\nfunction flattenDeep(arr) {\n  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (var i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n\n  return newArr;\n}\n\nactions.resetHiddenColumns = 'resetHiddenColumns';\nactions.toggleHideColumn = 'toggleHideColumn';\nactions.setHiddenColumns = 'setHiddenColumns';\nactions.toggleHideAllColumns = 'toggleHideAllColumns';\n\nvar useColumnVisibility = function useColumnVisibility(hooks) {\n  hooks.getToggleHiddenProps = [];\n  hooks.getToggleHideAllColumnsProps = [];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n  hooks.headerGroupsDeps.push(function (deps, instance) {\n    return [].concat(_toConsumableArray(deps), [instance.state.hiddenColumns]);\n  });\n  hooks.useInstance.push(useInstance);\n};\n\nuseColumnVisibility.pluginName = 'useColumnVisibility';\n\nfunction reducer(state, action, previousState, instanceRef) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      hiddenColumns: []\n    }, state);\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return _objectSpread2({}, state, {\n      hiddenColumns: []\n    });\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n    var hiddenColumns = should ? [].concat(_toConsumableArray(state.hiddenColumns), [action.columnId]) : state.hiddenColumns.filter(function (d) {\n      return d !== action.columnId;\n    });\n    return _objectSpread2({}, state, {\n      hiddenColumns: hiddenColumns\n    });\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return _objectSpread2({}, state, {\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n    });\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n    return _objectSpread2({}, state, {\n      hiddenColumns: shouldAll ? instanceRef.current.flatColumns.map(function (d) {\n        return d.id;\n      }) : []\n    });\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  var headers = instance.headers,\n      hiddenColumns = instance.state.hiddenColumns;\n\n  var handleColumn = function handleColumn(column, parentVisible) {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n    var totalVisibleHeaderCount = 0;\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(function (subColumn) {\n        return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n      });\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n    return totalVisibleHeaderCount;\n  };\n\n  var totalVisibleHeaderCount = 0;\n  headers.forEach(function (subHeader) {\n    return totalVisibleHeaderCount += handleColumn(subHeader, true);\n  });\n  return instance;\n}\n\nfunction useInstance(instance) {\n  var flatHeaders = instance.flatHeaders,\n      dispatch = instance.dispatch,\n      flatColumns = instance.flatColumns,\n      hiddenColumns = instance.state.hiddenColumns;\n  var getInstance = useGetLatest(instance);\n  var allColumnsHidden = flatColumns.length === hiddenColumns.length;\n  flatHeaders.forEach(function (column) {\n    column.toggleHidden = function (value) {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value: value\n      });\n    };\n\n    column.getToggleHiddenProps = function (props) {\n      return mergeProps({\n        onChange: function onChange(e) {\n          column.toggleHidden(!e.target.checked);\n        },\n        style: {\n          cursor: 'pointer'\n        },\n        checked: column.isVisible,\n        title: 'Toggle Column Visible'\n      }, applyPropHooks(getInstance().hooks.getToggleHiddenProps, getInstance()), props);\n    };\n  });\n  var toggleHideColumn = React.useCallback(function (columnId, value) {\n    return dispatch({\n      type: actions.toggleHideColumn,\n      columnId: columnId,\n      value: value\n    });\n  }, [dispatch]);\n  var setHiddenColumns = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.setHiddenColumns,\n      value: value\n    });\n  }, [dispatch]);\n  var toggleHideAllColumns = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.toggleHideAllColumns,\n      value: value\n    });\n  }, [dispatch]);\n\n  var getToggleHideAllColumnsProps = function getToggleHideAllColumnsProps(props) {\n    return mergeProps({\n      onChange: function onChange(e) {\n        toggleHideAllColumns(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: !allColumnsHidden && !hiddenColumns.length,\n      title: 'Toggle All Columns Hidden',\n      indeterminate: !allColumnsHidden && hiddenColumns.length\n    }, applyPropHooks(getInstance().hooks.getToggleHideAllColumnsProps, getInstance()), props);\n  };\n\n  return _objectSpread2({}, instance, {\n    toggleHideColumn: toggleHideColumn,\n    setHiddenColumns: setHiddenColumns,\n    toggleHideAllColumns: toggleHideAllColumns,\n    getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n  });\n}\n\nvar renderErr = 'Renderer Error';\nvar defaultInitialState = {};\nvar defaultColumnInstance = {};\n\nvar defaultReducer = function defaultReducer(state, action, prevState) {\n  return state;\n};\n\nvar defaultGetSubRows = function defaultGetSubRows(row, index) {\n  return row.subRows || [];\n};\n\nvar defaultGetRowId = function defaultGetRowId(row, index) {\n  return index;\n};\n\nvar defaultUseControlledState = function defaultUseControlledState(d) {\n  return d;\n};\n\nvar useTable = function useTable(props) {\n  for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    plugins[_key - 1] = arguments[_key];\n  } // Destructure props\n\n\n  var data = props.data,\n      userColumns = props.columns,\n      _props$initialState = props.initialState,\n      initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n      _props$defaultColumn = props.defaultColumn,\n      defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n      _props$getSubRows = props.getSubRows,\n      getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n      _props$getRowId = props.getRowId,\n      getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n      _props$stateReducer = props.stateReducer,\n      userStateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,\n      _props$useControlledS = props.useControlledState,\n      useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS;\n  plugins = [useColumnVisibility].concat(_toConsumableArray(plugins)); // The table instance\n\n  var instanceRef = React.useRef({});\n  Object.assign(instanceRef.current, _objectSpread2({}, props, {\n    plugins: plugins,\n    data: data,\n    hooks: {\n      stateReducers: [],\n      columns: [],\n      columnsDeps: [],\n      flatColumns: [],\n      flatColumnsDeps: [],\n      headerGroups: [],\n      headerGroupsDeps: [],\n      useInstanceBeforeDimensions: [],\n      useInstance: [],\n      useRows: [],\n      prepareRow: [],\n      getTableProps: [],\n      getTableBodyProps: [],\n      getRowProps: [],\n      getHeaderGroupProps: [],\n      getFooterGroupProps: [],\n      getHeaderProps: [],\n      getFooterProps: [],\n      getCellProps: []\n    }\n  })); // Allow plugins to register hooks as early as possible\n\n  plugins.filter(Boolean).forEach(function (plugin) {\n    plugin(instanceRef.current.hooks);\n  }); // Snapshot hook and disallow more from being added\n\n  var getStateReducers = useConsumeHookGetter(instanceRef.current.hooks, 'stateReducers'); // Setup user reducer ref\n\n  var getUserStateReducer = useGetLatest(userStateReducer); // Build the reducer\n\n  var reducer = React.useCallback(function (state, action) {\n    // Detect invalid actions\n    if (!action.type) {\n      console.info({\n        action: action\n      });\n      throw new Error('Unknown Action 👆');\n    } // Reduce the state from all plugin reducers\n\n\n    return [].concat(_toConsumableArray(getStateReducers()), _toConsumableArray(Array.isArray(getUserStateReducer()) ? getUserStateReducer() : [getUserStateReducer()])).reduce(function (s, handler) {\n      return handler(s, action, state, instanceRef) || s;\n    }, state);\n  }, [getStateReducers, getUserStateReducer]); // Start the reducer\n\n  var _React$useReducer = React.useReducer(reducer, undefined, function () {\n    return reducer(initialState, {\n      type: actions.init\n    });\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      reducerState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1]; // Allow the user to control the final state with hooks\n\n\n  var state = useControlledState(reducerState);\n  Object.assign(instanceRef.current, {\n    state: state,\n    // The state dispatcher\n    dispatch: dispatch // The resolved table state\n\n  }); // Snapshot hook and disallow more from being added\n\n  var getColumns = useConsumeHookGetter(instanceRef.current.hooks, 'columns'); // Snapshot hook and disallow more from being added\n\n  var getColumnsDeps = useConsumeHookGetter(instanceRef.current.hooks, 'columnsDeps'); // Decorate All the columns\n\n  var columns = React.useMemo(function () {\n    return applyHooks(getColumns(), decorateColumnTree(userColumns, defaultColumn), instanceRef.current);\n  }, [defaultColumn, getColumns, userColumns].concat(_toConsumableArray(getColumnsDeps(instanceRef.current))));\n  instanceRef.current.columns = columns; // Snapshot hook and disallow more from being added\n\n  var getFlatColumns = useConsumeHookGetter(instanceRef.current.hooks, 'flatColumns'); // Snapshot hook and disallow more from being added\n\n  var getFlatColumnsDeps = useConsumeHookGetter(instanceRef.current.hooks, 'flatColumnsDeps'); // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  var flatColumns = React.useMemo(function () {\n    return applyHooks(getFlatColumns(), flattenBy(columns, 'columns'), instanceRef.current);\n  }, [columns, getFlatColumns].concat(_toConsumableArray(getFlatColumnsDeps(instanceRef.current))));\n  instanceRef.current.flatColumns = flatColumns; // Snapshot hook and disallow more from being added\n\n  var getHeaderGroups = useConsumeHookGetter(instanceRef.current.hooks, 'headerGroups'); // Snapshot hook and disallow more from being added\n\n  var getHeaderGroupsDeps = useConsumeHookGetter(instanceRef.current.hooks, 'headerGroupsDeps'); // Make the headerGroups\n\n  var headerGroups = React.useMemo(function () {\n    return applyHooks(getHeaderGroups(), makeHeaderGroups(flatColumns, defaultColumn), instanceRef.current);\n  }, [defaultColumn, flatColumns, getHeaderGroups].concat(_toConsumableArray(getHeaderGroupsDeps())));\n  instanceRef.current.headerGroups = headerGroups;\n  var headers = React.useMemo(function () {\n    return headerGroups.length ? headerGroups[0].headers : [];\n  }, [headerGroups]);\n  instanceRef.current.headers = headers; // Access the row model\n\n  var _React$useMemo = React.useMemo(function () {\n    var flatRows = []; // Access the row's data\n\n    var accessRow = function accessRow(originalRow, i) {\n      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : []; // Keep the original reference around\n\n      var original = originalRow;\n      var rowId = getRowId(originalRow, i); // Make the new path for the row\n\n      var path = [].concat(_toConsumableArray(parentPath), [rowId]);\n      var row = {\n        original: original,\n        index: i,\n        path: path,\n        // used to create a key for each row even if not nested\n        depth: depth,\n        cells: [{}] // This is a dummy cell\n\n      };\n      flatRows.push(row); // Process any subRows\n\n      var subRows = getSubRows(originalRow, i);\n\n      if (subRows) {\n        row.subRows = subRows.map(function (d, i) {\n          return accessRow(d, i, depth + 1, path);\n        });\n      } // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n\n\n      var unpreparedAccessWarning = function unpreparedAccessWarning() {\n        throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n      };\n\n      row.cells.map = unpreparedAccessWarning;\n      row.cells.filter = unpreparedAccessWarning;\n      row.cells.forEach = unpreparedAccessWarning;\n      row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n      row.values = {};\n      flatColumns.forEach(function (column) {\n        row.values[column.id] = column.accessor ? column.accessor(originalRow, i, {\n          subRows: subRows,\n          depth: depth,\n          data: data\n        }) : undefined;\n      });\n      return row;\n    }; // Use the resolved data\n\n\n    var accessedData = data.map(function (d, i) {\n      return accessRow(d, i);\n    });\n    return [accessedData, flatRows];\n  }, [data, getRowId, getSubRows, flatColumns]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rows = _React$useMemo2[0],\n      flatRows = _React$useMemo2[1];\n\n  instanceRef.current.rows = rows;\n  instanceRef.current.flatRows = flatRows; // Provide a flat header list for utilities\n\n  instanceRef.current.flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n    return [].concat(_toConsumableArray(all), _toConsumableArray(headerGroup.headers));\n  }, []); // Snapshot hook and disallow more from being added\n\n  var getUseInstanceBeforeDimensions = useConsumeHookGetter(instanceRef.current.hooks, 'useInstanceBeforeDimensions');\n  instanceRef.current = applyHooks(getUseInstanceBeforeDimensions(), instanceRef.current); // Header Visibility is needed by this point\n\n  calculateDimensions(instanceRef.current); // Snapshot hook and disallow more from being added\n\n  var getUseInstance = useConsumeHookGetter(instanceRef.current.hooks, 'useInstance');\n  instanceRef.current = applyHooks(getUseInstance(), instanceRef.current); // Snapshot hook and disallow more from being added\n\n  var getHeaderPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getHeaderProps'); // Snapshot hook and disallow more from being added\n\n  var getFooterPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getFooterProps'); // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n\n  instanceRef.current.flatHeaders.forEach(function (column) {\n    // Give columns/headers rendering power\n    column.render = function (type) {\n      var userProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var Comp = typeof type === 'string' ? column[type] : type;\n\n      if (typeof Comp === 'undefined') {\n        throw new Error(renderErr);\n      }\n\n      return flexRender(Comp, _objectSpread2({}, instanceRef.current, {\n        column: column\n      }, userProps));\n    }; // Give columns/headers a default getHeaderProps\n\n\n    column.getHeaderProps = function (props) {\n      return mergeProps({\n        key: ['header', column.id].join('_'),\n        colSpan: column.totalVisibleHeaderCount\n      }, applyPropHooks(getHeaderPropsHooks(), column, instanceRef.current), props);\n    }; // Give columns/headers a default getFooterProps\n\n\n    column.getFooterProps = function (props) {\n      return mergeProps({\n        key: ['footer', column.id].join('_'),\n        colSpan: column.totalVisibleHeaderCount\n      }, applyPropHooks(getFooterPropsHooks(), column, instanceRef.current), props);\n    };\n  }); // Snapshot hook and disallow more from being added\n\n  var getHeaderGroupPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getHeaderGroupProps'); // Snapshot hook and disallow more from being added\n\n  var getFooterGroupsPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getFooterGroupProps');\n  instanceRef.current.headerGroups = instanceRef.current.headerGroups.filter(function (headerGroup, i) {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(function (column) {\n      var recurse = function recurse(headers) {\n        return headers.filter(function (column) {\n          if (column.headers) {\n            return recurse(column.headers);\n          }\n\n          return column.isVisible;\n        }).length;\n      };\n\n      if (column.headers) {\n        return recurse(column.headers);\n      }\n\n      return column.isVisible;\n    }); // Give headerGroups getRowProps\n\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = function () {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return mergeProps({\n          key: [\"header\".concat(i)].join('_')\n        }, applyPropHooks(getHeaderGroupPropsHooks(), headerGroup, instanceRef.current), props);\n      };\n\n      headerGroup.getFooterGroupProps = function () {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return mergeProps({\n          key: [\"footer\".concat(i)].join('_')\n        }, applyPropHooks(getFooterGroupsPropsHooks(), headerGroup, instanceRef.current), props);\n      };\n\n      return true;\n    }\n\n    return false;\n  });\n  instanceRef.current.footerGroups = _toConsumableArray(instanceRef.current.headerGroups).reverse(); // Run the rows (this could be a dangerous hook with a ton of data)\n  // Snapshot hook and disallow more from being added\n\n  var getUseRowsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'useRows');\n  instanceRef.current.rows = applyHooks(getUseRowsHooks(), instanceRef.current.rows, instanceRef.current); // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n  // Snapshot hook and disallow more from being added\n\n  var getPrepareRowHooks = useConsumeHookGetter(instanceRef.current.hooks, 'prepareRow'); // Snapshot hook and disallow more from being added\n\n  var getRowPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getRowProps'); // Snapshot hook and disallow more from being added\n\n  var getCellPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getCellProps');\n  instanceRef.current.prepareRow = React.useCallback(function (row) {\n    row.getRowProps = function (props) {\n      return mergeProps({\n        key: ['row'].concat(_toConsumableArray(row.path)).join('_')\n      }, applyPropHooks(getRowPropsHooks(), row, instanceRef.current), props);\n    }; // Build the visible cells for each row\n\n\n    row.cells = instanceRef.current.flatColumns.filter(function (d) {\n      return d.isVisible;\n    }).map(function (column) {\n      var cell = {\n        column: column,\n        row: row,\n        value: row.values[column.id]\n      }; // Give each cell a getCellProps base\n\n      cell.getCellProps = function (props) {\n        var columnPathStr = [].concat(_toConsumableArray(row.path), [column.id]).join('_');\n        return mergeProps({\n          key: ['cell', columnPathStr].join('_')\n        }, applyPropHooks(getCellPropsHooks(), cell, instanceRef.current), props);\n      }; // Give each cell a renderer function (supports multiple renderers)\n\n\n      cell.render = function (type) {\n        var userProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var Comp = typeof type === 'string' ? column[type] : type;\n\n        if (typeof Comp === 'undefined') {\n          throw new Error(renderErr);\n        }\n\n        return flexRender(Comp, _objectSpread2({}, instanceRef.current, {\n          column: column,\n          row: row,\n          cell: cell\n        }, userProps));\n      };\n\n      return cell;\n    }); // need to apply any row specific hooks (useExpanded requires this)\n\n    applyHooks(getPrepareRowHooks(), row, instanceRef.current);\n  }, [getCellPropsHooks, getPrepareRowHooks, getRowPropsHooks]); // Snapshot hook and disallow more from being added\n\n  var getTablePropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getTableProps');\n\n  instanceRef.current.getTableProps = function (userProps) {\n    return mergeProps(applyPropHooks(getTablePropsHooks(), instanceRef.current), userProps);\n  }; // Snapshot hook and disallow more from being added\n\n\n  var getTableBodyPropsHooks = useConsumeHookGetter(instanceRef.current.hooks, 'getTableBodyProps');\n\n  instanceRef.current.getTableBodyProps = function (userProps) {\n    return mergeProps(applyPropHooks(getTableBodyPropsHooks(), instanceRef.current), userProps);\n  };\n\n  return instanceRef.current;\n};\n\nfunction calculateDimensions(instance) {\n  var headers = instance.headers;\n  instance.totalColumnsWidth = calculateHeaderWidths(headers);\n}\n\nfunction calculateHeaderWidths(headers) {\n  var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var sumTotalWidth = 0;\n  headers.forEach(function (header) {\n    var subHeaders = header.headers;\n    header.totalLeft = left;\n\n    if (subHeaders && subHeaders.length) {\n      header.totalWidth = calculateHeaderWidths(subHeaders, left);\n    } else {\n      header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n    }\n\n    if (header.isVisible) {\n      left += header.totalWidth;\n      sumTotalWidth += header.totalWidth;\n    }\n  });\n  return sumTotalWidth;\n}\n\nactions.toggleExpandedByPath = 'toggleExpandedByPath';\nactions.resetExpanded = 'resetExpanded';\n\nvar useExpanded = function useExpanded(hooks) {\n  hooks.getExpandedToggleProps = [];\n  hooks.stateReducers.push(reducer$1);\n  hooks.useInstance.push(useInstance$1);\n};\n\nuseExpanded.pluginName = 'useExpanded'; // Reducer\n\nfunction reducer$1(state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      expanded: []\n    }, state);\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return _objectSpread2({}, state, {\n      expanded: []\n    });\n  }\n\n  if (action.type === actions.toggleExpandedByPath) {\n    var path = action.path,\n        expanded = action.expanded;\n    var key = path.join('.');\n    var exists = state.expanded.includes(key);\n    var shouldExist = typeof expanded !== 'undefined' ? expanded : !exists;\n    var newExpanded = new Set(state.expanded);\n\n    if (!exists && shouldExist) {\n      newExpanded.add(key);\n    } else if (exists && !shouldExist) {\n      newExpanded.delete(key);\n    } else {\n      return state;\n    }\n\n    return _objectSpread2({}, state, {\n      expanded: _toConsumableArray(newExpanded.values())\n    });\n  }\n}\n\nfunction useInstance$1(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      hooks = instance.hooks,\n      _instance$autoResetEx = instance.autoResetExpanded,\n      autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,\n      expanded = instance.state.expanded,\n      dispatch = instance.dispatch;\n  var getAutoResetExpanded = useGetLatest(autoResetExpanded); // Bypass any effects from firing when this changes\n\n  useMountedLayoutEffect(function () {\n    if (getAutoResetExpanded()) {\n      dispatch({\n        type: actions.resetExpanded\n      });\n    }\n  }, [dispatch, data]);\n\n  var toggleExpandedByPath = function toggleExpandedByPath(path, expanded) {\n    dispatch({\n      type: actions.toggleExpandedByPath,\n      path: path,\n      expanded: expanded\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n  hooks.prepareRow.push(function (row) {\n    row.toggleExpanded = function (set) {\n      return toggleExpandedByPath(row.path, set);\n    };\n\n    row.getExpandedToggleProps = function (props) {\n      return mergeProps({\n        onClick: function onClick(e) {\n          e.persist();\n          row.toggleExpanded();\n        },\n        style: {\n          cursor: 'pointer'\n        },\n        title: 'Toggle Expanded'\n      }, applyPropHooks(instanceRef.current.hooks.getExpandedToggleProps, row, instanceRef.current), props);\n    };\n\n    return row;\n  });\n  var expandedRows = React.useMemo(function () {\n    if (paginateExpandedRows) {\n      return expandRows(rows, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }\n\n    return rows;\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n  var expandedDepth = findExpandedDepth(expanded);\n  return _objectSpread2({}, instance, {\n    toggleExpandedByPath: toggleExpandedByPath,\n    expandedDepth: expandedDepth,\n    rows: expandedRows\n  });\n}\n\nfunction findExpandedDepth(expanded) {\n  var maxDepth = 0;\n  expanded.forEach(function (key) {\n    var path = key.split('.');\n    maxDepth = Math.max(maxDepth, path.length);\n  });\n  return maxDepth;\n}\n\nvar text = function text(rows, id, filterValue) {\n  rows = rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n  });\n  return rows;\n};\n\ntext.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactText = function exactText(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n  });\n};\n\nexactText.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactTextCase = function exactTextCase(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n  });\n};\n\nexactTextCase.autoRemove = function (val) {\n  return !val;\n};\n\nvar includes = function includes(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return filterValue.includes(rowValue);\n  });\n};\n\nincludes.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar includesAll = function includesAll(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue && rowValue.length && filterValue.every(function (val) {\n      return rowValue.includes(val);\n    });\n  });\n};\n\nincludesAll.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar exact = function exact(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue === filterValue;\n  });\n};\n\nexact.autoRemove = function (val) {\n  return typeof val === 'undefined';\n};\n\nvar equals = function equals(rows, id, filterValue) {\n  return rows.filter(function (row) {\n    var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n    return rowValue == filterValue;\n  });\n};\n\nequals.autoRemove = function (val) {\n  return val == null;\n};\n\nvar between = function between(rows, id, filterValue) {\n  var _ref = filterValue || [],\n      _ref2 = _slicedToArray(_ref, 2),\n      min = _ref2[0],\n      max = _ref2[1];\n\n  min = typeof min === 'number' ? min : -Infinity;\n  max = typeof max === 'number' ? max : Infinity;\n\n  if (min > max) {\n    var temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return rows.filter(function (row) {\n    var rowValue = row.values[id];\n    return rowValue >= min && rowValue <= max;\n  });\n};\n\nbetween.autoRemove = function (val) {\n  return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n};\n\nvar filterTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  text: text,\n  exactText: exactText,\n  exactTextCase: exactTextCase,\n  includes: includes,\n  includesAll: includesAll,\n  exact: exact,\n  equals: equals,\n  between: between\n});\nactions.resetFilters = 'resetFilters';\nactions.setFilter = 'setFilter';\nactions.setAllFilters = 'setAllFilters';\n\nvar useFilters = function useFilters(hooks) {\n  hooks.stateReducers.push(reducer$2);\n  hooks.useInstance.push(useInstance$2);\n};\n\nuseFilters.pluginName = 'useFilters';\n\nfunction reducer$2(state, action, previousState, instanceRef) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      filters: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetFilters) {\n    return _objectSpread2({}, state, {\n      filters: {}\n    });\n  }\n\n  if (action.type === actions.setFilter) {\n    var columnId = action.columnId,\n        filterValue = action.filterValue;\n    var _instanceRef$current = instanceRef.current,\n        flatColumns = _instanceRef$current.flatColumns,\n        userFilterTypes = _instanceRef$current.userFilterTypes;\n    var column = flatColumns.find(function (d) {\n      return d.id === columnId;\n    });\n\n    if (!column) {\n      throw new Error(\"React-Table: Could not find a column with id: \".concat(columnId));\n    }\n\n    var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n    var newFilter = functionalUpdate(filterValue, state.filters[columnId]); //\n\n    if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n      var _state$filters = state.filters,\n          remove = _state$filters[columnId],\n          newFilters = _objectWithoutProperties(_state$filters, [columnId].map(_toPropertyKey));\n\n      return _objectSpread2({}, state, {\n        filters: newFilters\n      });\n    }\n\n    return _objectSpread2({}, state, {\n      filters: _objectSpread2({}, state.filters, _defineProperty({}, columnId, newFilter))\n    });\n  }\n\n  if (action.type === actions.setAllFilters) {\n    var filters = action.filters;\n    var _instanceRef$current2 = instanceRef.current,\n        _flatColumns = _instanceRef$current2.flatColumns,\n        _userFilterTypes = _instanceRef$current2.filterTypes;\n\n    var _newFilters = functionalUpdate(filters, state.filters); // Filter out undefined values\n\n\n    Object.keys(_newFilters).forEach(function (id) {\n      var newFilter = _newFilters[id];\n\n      var column = _flatColumns.find(function (d) {\n        return d.id === id;\n      });\n\n      var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n      if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n        delete _newFilters[id];\n      }\n    });\n    return _objectSpread2({}, state, {\n      filters: _newFilters\n    });\n  }\n}\n\nfunction useInstance$2(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      userFilterTypes = instance.filterTypes,\n      manualFilters = instance.manualFilters,\n      _instance$defaultCanF = instance.defaultCanFilter,\n      defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n      disableFilters = instance.disableFilters,\n      filters = instance.state.filters,\n      dispatch = instance.dispatch,\n      _instance$autoResetFi = instance.autoResetFilters,\n      autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n  var preFilteredRows = rows;\n  var preFilteredFlatRows = flatRows;\n\n  var setFilter = function setFilter(columnId, filterValue) {\n    dispatch({\n      type: actions.setFilter,\n      columnId: columnId,\n      filterValue: filterValue\n    });\n  };\n\n  var setAllFilters = function setAllFilters(filters) {\n    dispatch({\n      type: actions.setAllFilters,\n      filters: filters\n    });\n  };\n\n  flatColumns.forEach(function (column) {\n    var id = column.id,\n        accessor = column.accessor,\n        columnDefaultCanFilter = column.defaultCanFilter,\n        columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n    column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n    column.setFilter = function (val) {\n      return setFilter(column.id, val);\n    }; // Provide the current filter value to the column for\n    // convenience\n\n\n    column.filterValue = filters[id];\n  }); // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualFilters || !Object.keys(filters).length) {\n      return {\n        filteredRows: rows,\n        filteredFlatRows: flatRows\n      };\n    }\n\n    var filteredFlatRows = []; // Filters top level and nested rows\n\n    var filterRows = function filterRows(rows) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var filteredRows = rows;\n      filteredRows = Object.entries(filters).reduce(function (filteredSoFar, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            columnId = _ref2[0],\n            filterValue = _ref2[1]; // Find the filters column\n\n\n        var column = flatColumns.find(function (d) {\n          return d.id === columnId;\n        });\n\n        if (!column) {\n          return filteredSoFar;\n        }\n\n        if (depth === 0) {\n          column.preFilteredRows = filteredSoFar;\n        }\n\n        var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n        if (!filterMethod) {\n          console.warn(\"Could not find a valid 'column.filter' for column with the ID: \".concat(column.id, \".\"));\n          return filteredSoFar;\n        } // Pass the rows, id, filterValue and column to the filterMethod\n        // to get the filtered rows back\n\n\n        column.filteredRows = filterMethod(filteredSoFar, columnId, filterValue, column);\n        return column.filteredRows;\n      }, rows); // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n\n      filteredRows = filteredRows.map(function (row) {\n        filteredFlatRows.push(row);\n\n        if (!row.subRows) {\n          return row;\n        }\n\n        return _objectSpread2({}, row, {\n          subRows: row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows\n        });\n      });\n      return filteredRows;\n    };\n\n    return {\n      filteredRows: filterRows(rows),\n      filteredFlatRows: filteredFlatRows\n    };\n  }, [manualFilters, filters, rows, flatRows, flatColumns, userFilterTypes]),\n      filteredRows = _React$useMemo.filteredRows,\n      filteredFlatRows = _React$useMemo.filteredFlatRows;\n\n  React.useMemo(function () {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    var nonFilteredColumns = flatColumns.filter(function (column) {\n      return !Object.keys(filters).includes(column.id);\n    }); // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n\n    nonFilteredColumns.forEach(function (column) {\n      column.preFilteredRows = filteredRows;\n      column.filteredRows = filteredRows;\n    });\n  }, [filteredRows, filters, flatColumns]);\n  var getAutoResetFilters = useGetLatest(autoResetFilters);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetFilters()) {\n      dispatch({\n        type: actions.resetFilters\n      });\n    }\n  }, [dispatch, manualFilters ? null : data]);\n  return _objectSpread2({}, instance, {\n    setFilter: setFilter,\n    setAllFilters: setAllFilters,\n    preFilteredRows: preFilteredRows,\n    preFilteredFlatRows: preFilteredFlatRows,\n    rows: filteredRows,\n    flatRows: filteredFlatRows\n  });\n}\n\nfunction shouldAutoRemove(autoRemove, value) {\n  return autoRemove ? autoRemove(value) : typeof value === 'undefined';\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n}\n\nfunction sum(values, rows) {\n  return values.reduce(function (sum, next) {\n    return sum + next;\n  }, 0);\n}\n\nfunction average(values, rows) {\n  return Math.round(sum(values) / values.length * 100) / 100;\n}\n\nfunction median(values) {\n  values = values.length ? values : [0];\n  var min = Math.min.apply(Math, _toConsumableArray(values));\n  var max = Math.max.apply(Math, _toConsumableArray(values));\n  return (min + max) / 2;\n}\n\nfunction uniqueCount(values) {\n  return new Set(values).size;\n}\n\nfunction count(values) {\n  return values.length;\n}\n\nvar aggregations = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  sum: sum,\n  average: average,\n  median: median,\n  uniqueCount: uniqueCount,\n  count: count\n});\nactions.resetGroupBy = 'resetGroupBy';\nactions.toggleGroupBy = 'toggleGroupBy';\n\nvar useGroupBy = function useGroupBy(hooks) {\n  hooks.stateReducers.push(reducer$3);\n  hooks.flatColumnsDeps.push(function (deps, instance) {\n    return [].concat(_toConsumableArray(deps), [instance.state.groupBy]);\n  });\n  hooks.flatColumns.push(flatColumns);\n  hooks.useInstance.push(useInstance$3);\n};\n\nuseGroupBy.pluginName = 'useGroupBy'; // Reducer\n\nfunction reducer$3(state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      groupBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return _objectSpread2({}, state, {\n      groupBy: []\n    });\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    var columnId = action.columnId,\n        toggle = action.toggle;\n    var resolvedToggle = typeof toggle !== 'undefined' ? toggle : !state.groupBy.includes(columnId);\n\n    if (resolvedToggle) {\n      return _objectSpread2({}, state, {\n        groupBy: [].concat(_toConsumableArray(state.groupBy), [columnId])\n      });\n    }\n\n    return _objectSpread2({}, state, {\n      groupBy: state.groupBy.filter(function (d) {\n        return d !== columnId;\n      })\n    });\n  }\n}\n\nfunction flatColumns(flatColumns, _ref) {\n  var groupBy = _ref.state.groupBy; // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  var groupByColumns = groupBy.map(function (g) {\n    return flatColumns.find(function (col) {\n      return col.id === g;\n    });\n  });\n  var nonGroupByColumns = flatColumns.filter(function (col) {\n    return !groupBy.includes(col.id);\n  }); // If a groupByBoundary column is found, place the groupBy's after it\n\n  var groupByBoundaryColumnIndex = flatColumns.findIndex(function (column) {\n    return column.groupByBoundary;\n  }) + 1;\n  return [].concat(_toConsumableArray(nonGroupByColumns.slice(0, groupByBoundaryColumnIndex)), _toConsumableArray(groupByColumns), _toConsumableArray(nonGroupByColumns.slice(groupByBoundaryColumnIndex)));\n}\n\nvar defaultUserAggregations = {};\n\nfunction useInstance$3(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      flatColumns = instance.flatColumns,\n      flatHeaders = instance.flatHeaders,\n      _instance$groupByFn = instance.groupByFn,\n      groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n      manualGroupBy = instance.manualGroupBy,\n      defaultCanGroupBy = instance.defaultCanGroupBy,\n      disableGroupBy = instance.disableGroupBy,\n      _instance$aggregation = instance.aggregations,\n      userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n      hooks = instance.hooks,\n      plugins = instance.plugins,\n      groupBy = instance.state.groupBy,\n      dispatch = instance.dispatch,\n      _instance$autoResetGr = instance.autoResetGroupBy,\n      autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,\n      manaulGroupBy = instance.manaulGroupBy;\n  ensurePluginOrder(plugins, [], 'useGroupBy', ['useSortBy', 'useExpanded']);\n  flatColumns.forEach(function (column) {\n    var id = column.id,\n        accessor = column.accessor,\n        defaultColumnGroupBy = column.defaultGroupBy,\n        columnDisableGroupBy = column.disableGroupBy;\n    column.isGrouped = groupBy.includes(id);\n    column.groupedIndex = groupBy.indexOf(id);\n    column.canGroupBy = accessor ? getFirstDefined(columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(defaultColumnGroupBy, defaultCanGroupBy, false);\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = function () {\n        return toggleGroupBy(column.id);\n      };\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell;\n  });\n\n  var toggleGroupBy = function toggleGroupBy(columnId, toggle) {\n    dispatch({\n      type: actions.toggleGroupBy,\n      columnId: columnId,\n      toggle: toggle\n    });\n  };\n\n  hooks.getGroupByToggleProps = []; // use reference to avoid memory leak in #1608\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n  flatHeaders.forEach(function (header) {\n    var canGroupBy = header.canGroupBy;\n\n    header.getGroupByToggleProps = function (props) {\n      return mergeProps({\n        onClick: canGroupBy ? function (e) {\n          e.persist();\n          header.toggleGroupBy();\n        } : undefined,\n        style: {\n          cursor: canGroupBy ? 'pointer' : undefined\n        },\n        title: 'Toggle GroupBy'\n      }, applyPropHooks(instanceRef.current.hooks.getGroupByToggleProps, header, instanceRef.current), props);\n    };\n  });\n  hooks.prepareRow.push(function (row) {\n    row.cells.forEach(function (cell) {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Repeated cells are any columns in the groupBy that are not grouped\n\n      cell.isRepeatedValue = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n      cell.isAggregated = !cell.isGrouped && !cell.isRepeatedValue && row.canExpand;\n    });\n    return row;\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualGroupBy || !groupBy.length) {\n      return [rows, flatRows];\n    } // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n\n\n    var aggregateRowsToValues = function aggregateRowsToValues(rows, isAggregated) {\n      var values = {};\n      flatColumns.forEach(function (column) {\n        // Don't aggregate columns that are in the groupBy\n        if (groupBy.includes(column.id)) {\n          values[column.id] = rows[0] ? rows[0].values[column.id] : null;\n          return;\n        }\n\n        var columnValues = rows.map(function (d) {\n          return d.values[column.id];\n        });\n        var aggregator = column.aggregate;\n\n        if (Array.isArray(aggregator)) {\n          if (aggregator.length !== 2) {\n            console.info({\n              column: column\n            });\n            throw new Error(\"React Table: Complex aggregators must have 2 values, eg. aggregate: ['sum', 'count']. More info above...\");\n          }\n\n          if (isAggregated) {\n            aggregator = aggregator[1];\n          } else {\n            aggregator = aggregator[0];\n          }\n        }\n\n        var aggregateFn = typeof aggregator === 'function' ? aggregator : userAggregations[aggregator] || aggregations[aggregator];\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(columnValues, rows, isAggregated);\n        } else if (aggregator) {\n          console.info({\n            column: column\n          });\n          throw new Error(\"React Table: Invalid aggregate option for column listed above\");\n        } else {\n          values[column.id] = null;\n        }\n      });\n      return values;\n    };\n\n    var groupedFlatRows = []; // Recursively group the data\n\n    var groupRecursively = function groupRecursively(rows) {\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parentPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : []; // This is the last level, just return the rows\n\n      if (depth >= groupBy.length) {\n        rows.forEach(function (row) {\n          row.path = [].concat(_toConsumableArray(parentPath), _toConsumableArray(row.path));\n        });\n        groupedFlatRows = groupedFlatRows.concat(rows);\n        return rows;\n      }\n\n      var columnId = groupBy[depth]; // Group the rows together for this level\n\n      var groupedRows = groupByFn(rows, columnId); // Recurse to sub rows before aggregation\n\n      groupedRows = Object.entries(groupedRows).map(function (_ref2, index) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            groupByVal = _ref3[0],\n            subRows = _ref3[1];\n\n        var path = [].concat(_toConsumableArray(parentPath), [\"\".concat(columnId, \":\").concat(groupByVal)]);\n        subRows = groupRecursively(subRows, depth + 1, path);\n        var values = aggregateRowsToValues(subRows, depth < groupBy.length);\n        var row = {\n          isAggregated: true,\n          groupByID: columnId,\n          groupByVal: groupByVal,\n          values: values,\n          subRows: subRows,\n          depth: depth,\n          index: index,\n          path: path\n        };\n        groupedFlatRows.push(row);\n        return row;\n      });\n      return groupedRows;\n    };\n\n    var groupedRows = groupRecursively(rows); // Assign the new data\n\n    return [groupedRows, groupedFlatRows];\n  }, [manualGroupBy, groupBy, rows, flatRows, flatColumns, userAggregations, groupByFn]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      groupedRows = _React$useMemo2[0],\n      groupedFlatRows = _React$useMemo2[1];\n\n  var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetGroupBy()) {\n      dispatch({\n        type: actions.resetGroupBy\n      });\n    }\n  }, [dispatch, manaulGroupBy ? null : data]);\n  return _objectSpread2({}, instance, {\n    toggleGroupBy: toggleGroupBy,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    preGroupedRows: rows\n  });\n}\n\nvar reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\nvar alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n  a = toString(a);\n  b = toString(b); // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n\n  a = a.split(reSplitAlphaNumeric).filter(Boolean);\n  b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    var aa = a.shift();\n    var bb = b.shift();\n    var an = parseInt(aa, 10);\n    var bn = parseInt(bb, 10);\n    var combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n};\n\nfunction datetime(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  a = a.getTime();\n  b = b.getTime();\n  return compareBasic(a, b);\n}\n\nfunction basic(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  return compareBasic(a, b);\n} // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId];\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n}\n\nvar sortTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  alphanumeric: alphanumeric,\n  datetime: datetime,\n  basic: basic\n});\nactions.resetSortBy = 'resetSortBy';\nactions.toggleSortBy = 'toggleSortBy';\nactions.clearSortBy = 'clearSortBy';\ndefaultColumn.sortType = 'alphanumeric';\ndefaultColumn.sortDescFirst = false;\n\nvar useSortBy = function useSortBy(hooks) {\n  hooks.stateReducers.push(reducer$4);\n  hooks.useInstance.push(useInstance$4);\n};\n\nuseSortBy.pluginName = 'useSortBy'; // Reducer\n\nfunction reducer$4(state, action, previousState, instanceRef) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      sortBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return _objectSpread2({}, state, {\n      sortBy: []\n    });\n  }\n\n  if (action.type === actions.clearSortBy) {\n    var sortBy = state.sortBy;\n    var newSortBy = sortBy.filter(function (d) {\n      return d.id !== action.columnId;\n    });\n    return _objectSpread2({}, state, {\n      sortBy: newSortBy\n    });\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    var columnId = action.columnId,\n        desc = action.desc,\n        multi = action.multi;\n    var _instanceRef$current = instanceRef.current,\n        flatColumns = _instanceRef$current.flatColumns,\n        disableMultiSort = _instanceRef$current.disableMultiSort,\n        disableSortRemove = _instanceRef$current.disableSortRemove,\n        disableMultiRemove = _instanceRef$current.disableMultiRemove,\n        _instanceRef$current$ = _instanceRef$current.maxMultiSortColCount,\n        maxMultiSortColCount = _instanceRef$current$ === void 0 ? Number.MAX_SAFE_INTEGER : _instanceRef$current$;\n    var _sortBy = state.sortBy; // Find the column for this columnId\n\n    var column = flatColumns.find(function (d) {\n      return d.id === columnId;\n    });\n    var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n    var existingSortBy = _sortBy.find(function (d) {\n      return d.id === columnId;\n    });\n\n    var existingIndex = _sortBy.findIndex(function (d) {\n      return d.id === columnId;\n    });\n\n    var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n    var _newSortBy = []; // What should we do with this sort action?\n\n    var sortAction;\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'add';\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== _sortBy.length - 1) {\n        sortAction = 'replace';\n      } else if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'replace';\n      }\n    } // Handle toggle states that will remove the sortBy\n\n\n    if (sortAction === 'toggle' && // Must be toggling\n    !disableSortRemove && // If disableSortRemove, disable in general\n    !hasDescDefined && ( // Must not be setting desc\n    multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n    existingSortBy && // Finally, detect if it should indeed be removed\n    existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n      sortAction = 'remove';\n    }\n\n    if (sortAction === 'replace') {\n      _newSortBy = [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }];\n    } else if (sortAction === 'add') {\n      _newSortBy = [].concat(_toConsumableArray(_sortBy), [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }]); // Take latest n columns\n\n      _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      _newSortBy = _sortBy.map(function (d) {\n        if (d.id === columnId) {\n          return _objectSpread2({}, d, {\n            desc: hasDescDefined ? desc : !existingSortBy.desc\n          });\n        }\n\n        return d;\n      });\n    } else if (sortAction === 'remove') {\n      _newSortBy = _sortBy.filter(function (d) {\n        return d.id !== columnId;\n      });\n    }\n\n    return _objectSpread2({}, state, {\n      sortBy: _newSortBy\n    });\n  }\n}\n\nfunction useInstance$4(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatColumns = instance.flatColumns,\n      _instance$orderByFn = instance.orderByFn,\n      orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n      userSortTypes = instance.sortTypes,\n      manualSortBy = instance.manualSortBy,\n      defaultCanSort = instance.defaultCanSort,\n      disableSortBy = instance.disableSortBy,\n      _instance$isMultiSort = instance.isMultiSortEvent,\n      isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n    return e.shiftKey;\n  } : _instance$isMultiSort,\n      flatHeaders = instance.flatHeaders,\n      hooks = instance.hooks,\n      sortBy = instance.state.sortBy,\n      dispatch = instance.dispatch,\n      plugins = instance.plugins,\n      _instance$autoResetSo = instance.autoResetSortBy,\n      autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n  ensurePluginOrder(plugins, ['useFilters'], 'useSortBy', []); // Add custom hooks\n\n  hooks.getSortByToggleProps = []; // Updates sorting based on a columnId, desc flag and multi flag\n\n  var toggleSortBy = function toggleSortBy(columnId, desc, multi) {\n    dispatch({\n      type: actions.toggleSortBy,\n      columnId: columnId,\n      desc: desc,\n      multi: multi\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n\n  flatHeaders.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnCanSort = column.canSort,\n        columnDisableSortBy = column.disableSortBy,\n        id = column.id;\n    var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n    column.canSort = canSort;\n\n    if (column.canSort) {\n      column.toggleSortBy = function (desc, multi) {\n        return toggleSortBy(column.id, desc, multi);\n      };\n\n      column.clearSortBy = function () {\n        dispatch({\n          type: actions.clearSortBy,\n          columnId: column.id\n        });\n      };\n    }\n\n    column.getSortByToggleProps = function (props) {\n      return mergeProps({\n        onClick: canSort ? function (e) {\n          e.persist();\n          column.toggleSortBy(undefined, !getInstance().disableMultiSort && isMultiSortEvent(e));\n        } : undefined,\n        style: {\n          cursor: canSort ? 'pointer' : undefined\n        },\n        title: canSort ? 'Toggle SortBy' : undefined\n      }, applyPropHooks(getInstance().hooks.getSortByToggleProps, column, getInstance()), props);\n    };\n\n    var columnSort = sortBy.find(function (d) {\n      return d.id === id;\n    });\n    column.isSorted = !!columnSort;\n    column.sortedIndex = sortBy.findIndex(function (d) {\n      return d.id === id;\n    });\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n  });\n  var sortedRows = React.useMemo(function () {\n    if (manualSortBy || !sortBy.length) {\n      return rows;\n    } // Filter out sortBys that correspond to non existing columns\n\n\n    var availableSortBy = sortBy.filter(function (sort) {\n      return flatColumns.find(function (col) {\n        return col.id === sort.id;\n      });\n    });\n\n    var sortData = function sortData(rows) {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n        // Support custom sorting methods for each column\n        var column = flatColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (!column) {\n          throw new Error(\"React-Table: Could not find a column with id: \".concat(sort.id, \" while sorting\"));\n        }\n\n        var sortType = column.sortType; // Look up sortBy functions in this order:\n        // column function\n        // column string lookup on user sortType\n        // column string lookup on built-in sortType\n        // default function\n        // default string lookup on user sortType\n        // default string lookup on built-in sortType\n\n        var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n        if (!sortMethod) {\n          throw new Error(\"React-Table: Could not find a valid sortType of '\".concat(sortType, \"' for column '\").concat(sort.id, \"'.\"));\n        } // Return the correct sortFn.\n        // This function should always return in ascending order\n\n\n        return function (a, b) {\n          return sortMethod(a, b, sort.id);\n        };\n      }), // Map the directions\n      availableSortBy.map(function (sort) {\n        // Detect and use the sortInverted option\n        var column = flatColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (column && column.sortInverted) {\n          return sort.desc;\n        }\n\n        return !sort.desc;\n      })); // If there are sub-rows, sort them\n\n      sortedData.forEach(function (row) {\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return sortData(rows);\n  }, [manualSortBy, sortBy, rows, flatColumns, orderByFn, userSortTypes]);\n  var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetSortBy()) {\n      dispatch({\n        type: actions.resetSortBy\n      });\n    }\n  }, [manualSortBy ? null : data]);\n  return _objectSpread2({}, instance, {\n    toggleSortBy: toggleSortBy,\n    rows: sortedRows,\n    preSortedRows: rows\n  });\n}\n\nvar pluginName = 'usePagination'; // Actions\n\nactions.resetPage = 'resetPage';\nactions.gotoPage = 'gotoPage';\nactions.setPageSize = 'setPageSize';\n\nvar usePagination = function usePagination(hooks) {\n  hooks.stateReducers.push(reducer$5);\n  hooks.useInstance.push(useInstance$5);\n};\n\nusePagination.pluginName = pluginName;\n\nfunction reducer$5(state, action, previousState, instanceRef) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      pageSize: 10,\n      pageIndex: 0\n    }, state);\n  }\n\n  if (action.type === actions.resetPage) {\n    return _objectSpread2({}, state, {\n      pageIndex: 0\n    });\n  }\n\n  if (action.type === actions.gotoPage) {\n    var pageCount = instanceRef.current.pageCount;\n    var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state;\n    }\n\n    return _objectSpread2({}, state, {\n      pageIndex: newPageIndex\n    });\n  }\n\n  if (action.type === actions.setPageSize) {\n    var pageSize = action.pageSize;\n    var topRowIndex = state.pageSize * state.pageIndex;\n    var pageIndex = Math.floor(topRowIndex / pageSize);\n    return _objectSpread2({}, state, {\n      pageIndex: pageIndex,\n      pageSize: pageSize\n    });\n  }\n}\n\nfunction useInstance$5(instance) {\n  var rows = instance.rows,\n      _instance$autoResetPa = instance.autoResetPage,\n      autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      plugins = instance.plugins,\n      userPageCount = instance.pageCount,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      _instance$state = instance.state,\n      pageSize = _instance$state.pageSize,\n      pageIndex = _instance$state.pageIndex,\n      expanded = _instance$state.expanded,\n      filters = _instance$state.filters,\n      groupBy = _instance$state.groupBy,\n      sortBy = _instance$state.sortBy,\n      dispatch = instance.dispatch,\n      data = instance.data,\n      manualPagination = instance.manualPagination,\n      manualFilters = instance.manualFilters,\n      manualGroupBy = instance.manualGroupBy,\n      manualSortBy = instance.manualSortBy;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination', []);\n  var getAutoResetPage = useGetLatest(autoResetPage);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetPage()) {\n      dispatch({\n        type: actions.resetPage\n      });\n    }\n  }, [dispatch, manualPagination ? null : data, manualPagination || manualFilters ? null : filters, manualPagination || manualGroupBy ? null : groupBy, manualPagination || manualSortBy ? null : sortBy]);\n  var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n  var pageOptions = React.useMemo(function () {\n    return pageCount > 0 ? _toConsumableArray(new Array(pageCount)).map(function (d, i) {\n      return i;\n    }) : [];\n  }, [pageCount]);\n  var page = React.useMemo(function () {\n    var page;\n\n    if (manualPagination) {\n      page = rows;\n    } else {\n      var pageStart = pageSize * pageIndex;\n      var pageEnd = pageStart + pageSize;\n      page = rows.slice(pageStart, pageEnd);\n    }\n\n    if (paginateExpandedRows) {\n      return page;\n    }\n\n    return expandRows(page, {\n      manualExpandedKey: manualExpandedKey,\n      expanded: expanded,\n      expandSubRows: expandSubRows\n    });\n  }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n  var canPreviousPage = pageIndex > 0;\n  var canNextPage = pageCount === -1 || pageIndex < pageCount - 1;\n  var gotoPage = React.useCallback(function (pageIndex) {\n    dispatch({\n      type: actions.gotoPage,\n      pageIndex: pageIndex\n    });\n  }, [dispatch]);\n  var previousPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old - 1;\n    });\n  }, [gotoPage]);\n  var nextPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old + 1;\n    });\n  }, [gotoPage]);\n  var setPageSize = React.useCallback(function (pageSize) {\n    dispatch({\n      type: actions.setPageSize,\n      pageSize: pageSize\n    });\n  }, [dispatch]);\n  return _objectSpread2({}, instance, {\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    page: page,\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    gotoPage: gotoPage,\n    previousPage: previousPage,\n    nextPage: nextPage,\n    setPageSize: setPageSize,\n    pageIndex: pageIndex,\n    pageSize: pageSize\n  });\n}\n\nvar pluginName$1 = 'useRowSelect'; // Actions\n\nactions.resetSelectedRows = 'resetSelectedRows';\nactions.toggleRowSelectedAll = 'toggleRowSelectedAll';\nactions.toggleRowSelected = 'toggleRowSelected';\n\nvar useRowSelect = function useRowSelect(hooks) {\n  hooks.getToggleRowSelectedProps = [];\n  hooks.getToggleAllRowsSelectedProps = [];\n  hooks.stateReducers.push(reducer$6);\n  hooks.useRows.push(useRows);\n  hooks.useInstance.push(useInstance$6);\n};\n\nuseRowSelect.pluginName = pluginName$1;\n\nfunction reducer$6(state, action, previousState, instanceRef) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      selectedRowPaths: new Set()\n    }, state);\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return _objectSpread2({}, state, {\n      selectedRowPaths: new Set()\n    });\n  }\n\n  if (action.type === actions.toggleRowSelectedAll) {\n    var selected = action.selected;\n    var _instanceRef$current = instanceRef.current,\n        isAllRowsSelected = _instanceRef$current.isAllRowsSelected,\n        flatRowPaths = _instanceRef$current.flatRowPaths;\n    var selectAll = typeof selected !== 'undefined' ? selected : !isAllRowsSelected;\n    return _objectSpread2({}, state, {\n      selectedRowPaths: selectAll ? new Set(flatRowPaths) : new Set()\n    });\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    var path = action.path,\n        _selected = action.selected;\n    var _flatRowPaths = instanceRef.current.flatRowPaths;\n    var key = path.join('.');\n    var childRowPrefixKey = [key, '.'].join(''); // Join the paths of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n\n    var exists = state.selectedRowPaths.has(key);\n    var shouldExist = typeof set !== 'undefined' ? _selected : !exists;\n    var newSelectedRowPaths = new Set(state.selectedRowPaths);\n\n    if (!exists && shouldExist) {\n      _flatRowPaths.forEach(function (rowPath) {\n        if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n          newSelectedRowPaths.add(rowPath);\n        }\n      });\n    } else if (exists && !shouldExist) {\n      _flatRowPaths.forEach(function (rowPath) {\n        if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n          newSelectedRowPaths.delete(rowPath);\n        }\n      });\n    } else {\n      return state;\n    }\n\n    var updateParentRow = function updateParentRow(selectedRowPaths, path) {\n      var parentPath = path.slice(0, path.length - 1);\n      var parentKey = parentPath.join('.');\n      var selected = _flatRowPaths.filter(function (rowPath) {\n        var path = rowPath;\n        return path !== parentKey && path.startsWith(parentKey) && !selectedRowPaths.has(path);\n      }).length === 0;\n\n      if (selected) {\n        selectedRowPaths.add(parentKey);\n      } else {\n        selectedRowPaths.delete(parentKey);\n      }\n\n      if (parentPath.length > 1) updateParentRow(selectedRowPaths, parentPath);\n    }; // If the row is a subRow update\n    // its parent row to reflect changes\n\n\n    if (path.length > 1) updateParentRow(newSelectedRowPaths, path);\n    return _objectSpread2({}, state, {\n      selectedRowPaths: newSelectedRowPaths\n    });\n  }\n}\n\nfunction useRows(rows, instance) {\n  var selectedRowPaths = instance.state.selectedRowPaths;\n  instance.selectedFlatRows = React.useMemo(function () {\n    var selectedFlatRows = [];\n    rows.forEach(function (row) {\n      row.isSelected = getRowIsSelected(row, selectedRowPaths);\n\n      if (row.isSelected) {\n        selectedFlatRows.push(row);\n      }\n    });\n    return selectedFlatRows;\n  }, [rows, selectedRowPaths]);\n  return rows;\n}\n\nfunction useInstance$6(instance) {\n  var data = instance.data,\n      hooks = instance.hooks,\n      _instance$manualRowSe = instance.manualRowSelectedKey,\n      manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe,\n      plugins = instance.plugins,\n      flatRows = instance.flatRows,\n      _instance$autoResetSe = instance.autoResetSelectedRows,\n      autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,\n      selectedRowPaths = instance.state.selectedRowPaths,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy'], 'useRowSelect', []);\n  var flatRowPaths = flatRows.map(function (d) {\n    return d.path.join('.');\n  });\n  var isAllRowsSelected = !!flatRowPaths.length && !!selectedRowPaths.size;\n\n  if (isAllRowsSelected) {\n    if (flatRowPaths.some(function (d) {\n      return !selectedRowPaths.has(d);\n    })) {\n      isAllRowsSelected = false;\n    }\n  }\n\n  var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetSelectedRows()) {\n      dispatch({\n        type: actions.resetSelectedRows\n      });\n    }\n  }, [dispatch, data]);\n\n  var toggleRowSelectedAll = function toggleRowSelectedAll(selected) {\n    return dispatch({\n      type: actions.toggleRowSelectedAll,\n      selected: selected\n    });\n  };\n\n  var toggleRowSelected = function toggleRowSelected(path, selected) {\n    return dispatch({\n      type: actions.toggleRowSelected,\n      path: path,\n      selected: selected\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var instanceRef = React.useRef();\n  instanceRef.current = instance;\n\n  var getToggleAllRowsSelectedProps = function getToggleAllRowsSelectedProps(props) {\n    return mergeProps({\n      onChange: function onChange(e) {\n        toggleRowSelectedAll(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: isAllRowsSelected,\n      title: 'Toggle All Rows Selected'\n    }, applyPropHooks(instanceRef.current.hooks.getToggleAllRowsSelectedProps, instanceRef.current), props);\n  };\n\n  hooks.prepareRow.push(function (row) {\n    row.toggleRowSelected = function (set) {\n      return toggleRowSelected(row.path, set);\n    };\n\n    row.getToggleRowSelectedProps = function (props) {\n      var checked = false;\n\n      if (row.original && row.original[manualRowSelectedKey]) {\n        checked = true;\n      } else {\n        checked = row.isSelected;\n      }\n\n      return mergeProps({\n        onChange: function onChange(e) {\n          row.toggleRowSelected(e.target.checked);\n        },\n        style: {\n          cursor: 'pointer'\n        },\n        checked: checked,\n        title: 'Toggle Row Selected'\n      }, applyPropHooks(instanceRef.current.hooks.getToggleRowSelectedProps, row, instanceRef.current), props);\n    };\n\n    return row;\n  });\n  return _objectSpread2({}, instance, {\n    flatRowPaths: flatRowPaths,\n    toggleRowSelected: toggleRowSelected,\n    toggleRowSelectedAll: toggleRowSelectedAll,\n    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,\n    isAllRowsSelected: isAllRowsSelected\n  });\n}\n\nfunction getRowIsSelected(row, selectedRowPaths) {\n  if (row.isAggregated) {\n    return row.subRows.every(function (subRow) {\n      return getRowIsSelected(subRow, selectedRowPaths);\n    });\n  }\n\n  return selectedRowPaths.has(row.path.join('.'));\n}\n\nactions.setRowState = 'setRowState';\nactions.resetRowState = 'resetRowState';\n\nvar useRowState = function useRowState(hooks) {\n  hooks.stateReducers.push(reducer$7);\n  hooks.useInstance.push(useInstance$7);\n};\n\nuseRowState.pluginName = 'useRowState';\n\nfunction reducer$7(state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      rowState: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetRowState) {\n    return _objectSpread2({}, state, {\n      rowState: {}\n    });\n  }\n\n  if (action.type === actions.setRowState) {\n    var path = action.path,\n        value = action.value;\n    var pathKey = path.join('.');\n    return _objectSpread2({}, state, {\n      rowState: _objectSpread2({}, state.rowState, _defineProperty({}, pathKey, functionalUpdate(value, state.rowState[pathKey] || {})))\n    });\n  }\n}\n\nfunction useInstance$7(instance) {\n  var hooks = instance.hooks,\n      initialRowStateAccessor = instance.initialRowStateAccessor,\n      _instance$autoResetRo = instance.autoResetRowState,\n      autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,\n      rowState = instance.state.rowState,\n      data = instance.data,\n      dispatch = instance.dispatch;\n  var setRowState = React.useCallback(function (path, value, columnId) {\n    return dispatch({\n      type: actions.setRowState,\n      path: path,\n      value: value,\n      columnId: columnId\n    });\n  }, [dispatch]);\n  var setCellState = React.useCallback(function (rowPath, columnId, value) {\n    return setRowState(rowPath, function (old) {\n      return _objectSpread2({}, old, {\n        cellState: _objectSpread2({}, old.cellState, _defineProperty({}, columnId, functionalUpdate(value, (old.cellState || {})[columnId] || {})))\n      });\n    }, columnId);\n  }, [setRowState]);\n  var getAutoResetRowState = useGetLatest(autoResetRowState);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetRowState()) {\n      dispatch({\n        type: actions.resetRowState\n      });\n    }\n  }, [data]);\n  hooks.prepareRow.push(function (row) {\n    var pathKey = row.path.join('.');\n\n    if (row.original) {\n      row.state = (typeof rowState[pathKey] !== 'undefined' ? rowState[pathKey] : initialRowStateAccessor && initialRowStateAccessor(row)) || {};\n\n      row.setState = function (updater) {\n        return setRowState(row.path, updater);\n      };\n\n      row.cells.forEach(function (cell) {\n        cell.state = row.state.cellState || {};\n\n        cell.setState = function (updater) {\n          return setCellState(row.path, cell.column.id, updater);\n        };\n      });\n    }\n\n    return row;\n  });\n  return _objectSpread2({}, instance, {\n    setRowState: setRowState,\n    setCellState: setCellState\n  });\n}\n\nactions.resetColumnOrder = 'resetColumnOrder';\nactions.setColumnOrder = 'setColumnOrder';\n\nvar useColumnOrder = function useColumnOrder(hooks) {\n  hooks.stateReducers.push(reducer$8);\n  hooks.flatColumnsDeps.push(function (deps, instance) {\n    return [].concat(_toConsumableArray(deps), [instance.state.columnOrder]);\n  });\n  hooks.flatColumns.push(flatColumns$1);\n  hooks.useInstance.push(useInstance$8);\n};\n\nuseColumnOrder.pluginName = 'useColumnOrder';\n\nfunction reducer$8(state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      columnOrder: []\n    }, state);\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return _objectSpread2({}, state, {\n      columnOrder: []\n    });\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return _objectSpread2({}, state, {\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n    });\n  }\n}\n\nfunction flatColumns$1(columns, instance) {\n  var columnOrder = instance.state.columnOrder; // If there is no order, return the normal columns\n\n  if (!columnOrder || !columnOrder.length) {\n    return columns;\n  }\n\n  var columnOrderCopy = _toConsumableArray(columnOrder); // If there is an order, make a copy of the columns\n\n\n  var columnsCopy = _toConsumableArray(columns); // And make a new ordered array of the columns\n\n\n  var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n  var _loop = function _loop() {\n    var targetColumnId = columnOrderCopy.shift();\n    var foundIndex = columnsCopy.findIndex(function (d) {\n      return d.id === targetColumnId;\n    });\n\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n    }\n  };\n\n  while (columnsCopy.length && columnOrderCopy.length) {\n    _loop();\n  } // If there are any columns left, add them to the end\n\n\n  return [].concat(columnsInOrder, _toConsumableArray(columnsCopy));\n}\n\nfunction useInstance$8(instance) {\n  var dispatch = instance.dispatch;\n  var setColumnOrder = React.useCallback(function (columnOrder) {\n    return dispatch({\n      type: actions.setColumnOrder,\n      columnOrder: columnOrder\n    });\n  }, [dispatch]);\n  return _objectSpread2({}, instance, {\n    setColumnOrder: setColumnOrder\n  });\n}\n\ndefaultColumn.canResize = true; // Actions\n\nactions.columnStartResizing = 'columnStartResizing';\nactions.columnResizing = 'columnResizing';\nactions.columnDoneResizing = 'columnDoneResizing';\n\nvar useResizeColumns = function useResizeColumns(hooks) {\n  hooks.stateReducers.push(reducer$9);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n};\n\nuseResizeColumns.pluginName = 'useResizeColumns';\n\nfunction reducer$9(state, action) {\n  if (action.type === actions.init) {\n    return _objectSpread2({\n      columnResizing: {\n        columnWidths: {}\n      }\n    }, state);\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    var clientX = action.clientX,\n        columnId = action.columnId,\n        columnWidth = action.columnWidth,\n        headerIdWidths = action.headerIdWidths;\n    return _objectSpread2({}, state, {\n      columnResizing: _objectSpread2({}, state.columnResizing, {\n        startX: clientX,\n        headerIdWidths: headerIdWidths,\n        columnWidth: columnWidth,\n        isResizingColumn: columnId\n      })\n    });\n  }\n\n  if (action.type === actions.columnResizing) {\n    var _clientX = action.clientX;\n    var _state$columnResizing = state.columnResizing,\n        startX = _state$columnResizing.startX,\n        _columnWidth = _state$columnResizing.columnWidth,\n        _headerIdWidths = _state$columnResizing.headerIdWidths;\n    var deltaX = _clientX - startX;\n    var percentageDeltaX = deltaX / _columnWidth;\n    var newColumnWidths = {};\n\n    _headerIdWidths.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          headerId = _ref2[0],\n          headerWidth = _ref2[1];\n\n      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n    });\n\n    return _objectSpread2({}, state, {\n      columnResizing: _objectSpread2({}, state.columnResizing, {\n        columnWidths: _objectSpread2({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n      })\n    });\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return _objectSpread2({}, state, {\n      columnResizing: _objectSpread2({}, state.columnResizing, {\n        startX: null,\n        isResizingColumn: null\n      })\n    });\n  }\n}\n\nvar useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n  instance.hooks.getResizerProps = [];\n  var flatHeaders = instance.flatHeaders,\n      disableResizing = instance.disableResizing,\n      getHeaderProps = instance.hooks.getHeaderProps,\n      columnResizing = instance.state.columnResizing,\n      dispatch = instance.dispatch;\n  getHeaderProps.push(function () {\n    return {\n      style: {\n        position: 'relative'\n      }\n    };\n  });\n\n  var _onMouseDown = function onMouseDown(e, header) {\n    var headersToResize = getLeafHeaders(header);\n    var headerIdWidths = headersToResize.map(function (d) {\n      return [d.id, d.totalWidth];\n    });\n    var clientX = e.clientX;\n\n    var onMouseMove = function onMouseMove(e) {\n      var clientX = e.clientX;\n      dispatch({\n        type: actions.columnResizing,\n        clientX: clientX\n      });\n    };\n\n    var onMouseUp = function onMouseUp(e) {\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('mouseup', onMouseUp);\n      dispatch({\n        type: actions.columnDoneResizing\n      });\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('mouseup', onMouseUp);\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths: headerIdWidths,\n      clientX: clientX\n    });\n  }; // use reference to avoid memory leak in #1608\n\n\n  var getInstance = useGetLatest(instance);\n  flatHeaders.forEach(function (header) {\n    var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n    header.canResize = canResize;\n    header.width = columnResizing.columnWidths[header.id] || header.width;\n    header.isResizing = columnResizing.isResizingColumn === header.id;\n\n    if (canResize) {\n      header.getResizerProps = function (userProps) {\n        return mergeProps({\n          onMouseDown: function onMouseDown(e) {\n            return e.persist() || _onMouseDown(e, header);\n          },\n          style: {\n            cursor: 'ew-resize'\n          },\n          draggable: false\n        }, applyPropHooks(getInstance().hooks.getResizerProps, header, getInstance()), userProps);\n      };\n    }\n  });\n  return instance;\n};\n\nfunction getLeafHeaders(header) {\n  var leafHeaders = [];\n\n  var recurseHeader = function recurseHeader(header) {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader);\n    }\n\n    leafHeaders.push(header);\n  };\n\n  recurseHeader(header);\n  return leafHeaders;\n}\n\nvar useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n  hooks.useInstance.push(useInstance$9);\n};\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\nvar useInstance$9 = function useInstance(instance) {\n  var totalColumnsWidth = instance.totalColumnsWidth,\n      _instance$hooks = instance.hooks,\n      getRowProps = _instance$hooks.getRowProps,\n      getTableBodyProps = _instance$hooks.getTableBodyProps,\n      getHeaderGroupProps = _instance$hooks.getHeaderGroupProps,\n      getHeaderProps = _instance$hooks.getHeaderProps,\n      getCellProps = _instance$hooks.getCellProps;\n  var rowStyles = {\n    style: {\n      position: 'relative',\n      width: \"\".concat(totalColumnsWidth, \"px\")\n    }\n  };\n  getTableBodyProps.push(function () {\n    return rowStyles;\n  });\n  getRowProps.push(function () {\n    return rowStyles;\n  });\n  getHeaderGroupProps.push(function () {\n    return rowStyles;\n  }); // Calculating column/cells widths\n\n  var cellStyles = {\n    position: 'absolute',\n    top: 0\n  };\n  getHeaderProps.push(function (header) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        left: \"\".concat(header.totalLeft, \"px\"),\n        width: \"\".concat(header.totalWidth, \"px\")\n      })\n    };\n  });\n  getCellProps.push(function (cell) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        left: \"\".concat(cell.column.totalLeft, \"px\"),\n        width: \"\".concat(cell.column.totalWidth, \"px\")\n      })\n    };\n  });\n  return instance;\n};\n\nvar useBlockLayout = function useBlockLayout(hooks) {\n  hooks.useInstance.push(useInstance$a);\n};\n\nuseBlockLayout.pluginName = 'useBlockLayout';\n\nvar useInstance$a = function useInstance(instance) {\n  var totalColumnsWidth = instance.totalColumnsWidth,\n      _instance$hooks = instance.hooks,\n      getRowProps = _instance$hooks.getRowProps,\n      getHeaderGroupProps = _instance$hooks.getHeaderGroupProps,\n      getHeaderProps = _instance$hooks.getHeaderProps,\n      getCellProps = _instance$hooks.getCellProps;\n  var rowStyles = {\n    style: {\n      display: 'flex',\n      width: \"\".concat(totalColumnsWidth, \"px\")\n    }\n  };\n  getRowProps.push(function () {\n    return rowStyles;\n  });\n  getHeaderGroupProps.push(function () {\n    return rowStyles;\n  });\n  var cellStyles = {\n    display: 'inline-block',\n    boxSizing: 'border-box'\n  };\n  getHeaderProps.push(function (header) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        width: \"\".concat(header.totalWidth, \"px\")\n      })\n    };\n  });\n  getCellProps.push(function (cell) {\n    return {\n      style: _objectSpread2({}, cellStyles, {\n        width: \"\".concat(cell.column.totalWidth, \"px\")\n      })\n    };\n  });\n  return instance;\n};\n\nexport { actions, applyHooks, applyPropHooks, defaultColumn, defaultGroupByFn, defaultOrderByFn, ensurePluginOrder, functionalUpdate, mergeProps, safeUseLayoutEffect, useAbsoluteLayout, useAsyncDebounce, useBlockLayout, useColumnOrder, useConsumeHookGetter, useExpanded, useFilters, useGetLatest, useGroupBy, useMountedLayoutEffect, usePagination, useResizeColumns, useRowSelect, useRowState, useSortBy, useTable };","map":null,"metadata":{},"sourceType":"module"}